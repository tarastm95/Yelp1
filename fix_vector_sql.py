#!/usr/bin/env python3
"""
üîß Fix Vector Search SQL Parameter Handling
"""

import re

def fix_vector_sql():
    """–í–∏–ø—Ä–∞–≤–ª—è—î SQL –∑–∞–ø–∏—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –∑ pgvector –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    with open('backend/webhooks/vector_search_service.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ –∑–∞–º—ñ–Ω—é—î–º–æ –ø—Ä–æ–±–ª–µ–º–Ω–∏–π SQL –±–ª–æ–∫
    old_sql_block = '''            # –ü–æ–±—É–¥–æ–≤–∞ SQL –∑–∞–ø–∏—Ç—É –∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ—é —Å—Ö–æ–∂—ñ—Å—Ç—é
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ pgvector cosine similarity operator (<=>)
            base_query = """
                SELECT 
                    vc.id,
                    vc.content,
                    vc.page_number,
                    vc.chunk_index,
                    vc.token_count,
                    vc.chunk_type,
                    vc.metadata,
                    vd.filename,
                    vd.business_id,
                    vd.location_id,
                    (1 - (vc.embedding <=> %s::vector)) as similarity_score
                FROM webhooks_vectorchunk vc
                JOIN webhooks_vectordocument vd ON vc.document_id = vd.id
                WHERE vd.business_id = %s
                  AND vd.processing_status = 'completed'
            """
            
            params = [query_embedding_str, business_id]'''
    
    new_sql_block = '''            # –ü–æ–±—É–¥–æ–≤–∞ SQL –∑–∞–ø–∏—Ç—É –∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ—é —Å—Ö–æ–∂—ñ—Å—Ç—é (FIXED)
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ pgvector cosine similarity operator (<=>)
            
            logger.info(f"[VECTOR-SEARCH] üîß Building SQL query with embedding string length: {len(query_embedding_str)}")
            
            # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –í—Å—Ç–∞–≤–ª—è—î–º–æ embedding –Ω–∞–ø—Ä—è–º—É –≤ query –¥–ª—è pgvector
            base_query = f"""
                SELECT 
                    vc.id,
                    vc.content,
                    vc.page_number,
                    vc.chunk_index,
                    vc.token_count,
                    vc.chunk_type,
                    vc.metadata,
                    vd.filename,
                    vd.business_id,
                    vd.location_id,
                    (1 - (vc.embedding <=> '{query_embedding_str}'::vector)) as similarity_score
                FROM webhooks_vectorchunk vc
                JOIN webhooks_vectordocument vd ON vc.document_id = vd.id
                WHERE vd.business_id = %s
                  AND vd.processing_status = 'completed'
            """
            
            params = [business_id]  # –¢—ñ–ª—å–∫–∏ business_id —è–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä'''
    
    content = content.replace(old_sql_block, new_sql_block)
    
    # –¢–∞–∫–æ–∂ –≤–∏–ø—Ä–∞–≤–ª—è—î–º–æ similarity threshold —á–∞—Å—Ç–∏–Ω—É
    old_threshold_block = '''            # –î–æ–¥–∞—î–º–æ similarity threshold —Ç–∞ ordering
            base_query += """
                AND (1 - (vc.embedding <=> %s::vector)) >= %s
                ORDER BY vc.embedding <=> %s::vector
                LIMIT %s
            """
            
            params.extend([query_embedding_str, similarity_threshold, query_embedding_str, limit])'''
    
    new_threshold_block = '''            # –î–æ–¥–∞—î–º–æ similarity threshold —Ç–∞ ordering (FIXED)
            base_query += f"""
                AND (1 - (vc.embedding <=> '{query_embedding_str}'::vector)) >= %s
                ORDER BY vc.embedding <=> '{query_embedding_str}'::vector
                LIMIT %s
            """
            
            params.extend([similarity_threshold, limit])  # –¢—ñ–ª—å–∫–∏ threshold —Ç–∞ limit —è–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏'''
    
    content = content.replace(old_threshold_block, new_threshold_block)
    
    with open('backend/webhooks/vector_search_service.py', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ Fixed Vector Search SQL parameter handling!")
    print("  üîß Embedding now inserted directly into SQL string")
    print("  üîß Only business_id, similarity_threshold, limit as parameters")
    print("  üîß Should resolve pgvector parameter issues")

if __name__ == '__main__':
    fix_vector_sql()
