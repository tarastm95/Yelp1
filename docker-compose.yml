services:
  # ===== FRONTEND =====
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: yelp-frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    env_file:
      - ./frontend/.env
    depends_on:
      - backend
    restart: unless-stopped

  # ===== BACKEND =====
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: yelp-backend
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        uvicorn config.asgi:application 
        --host 0.0.0.0 
        --port 8000 
        --reload 
        --log-level debug
      "
    env_file:
      - ./backend/.env
    environment:
      # Перевизначаємо для Docker
      POSTGRES_HOST: "db"
      REDIS_URL: "redis://redis:6379/1"
      CORS_ALLOWED_ORIGINS: "http://localhost:5173,http://localhost:3000"
      FRONTEND_URL: "http://localhost:5173"
    volumes:
      - ./backend:/app
      - ./backend/logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # ===== DATABASE =====
  db:
    image: postgres:16-alpine
    container_name: yelp-database
    restart: unless-stopped
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: "yelproot"
      POSTGRES_PASSWORD: "yelproot"
      POSTGRES_DB: "postgres"
      POSTGRES_HOST_AUTH_METHOD: "md5"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/logs:/logs
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U yelproot -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===== REDIS =====
  redis:
    image: redis:7-alpine
    container_name: yelp-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ===== BACKGROUND WORKER =====
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: yelp-worker
    command: python manage.py rqworker default
    env_file:
      - ./backend/.env
    environment:
      POSTGRES_HOST: "db"
      REDIS_URL: "redis://redis:6379/1"
    volumes:
      - ./backend:/app
      - ./backend/logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # ===== SCHEDULER =====
  scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: yelp-scheduler
    command: python manage.py rqscheduler
    env_file:
      - ./backend/.env
    environment:
      POSTGRES_HOST: "db"
      REDIS_URL: "redis://redis:6379/1"
    volumes:
      - ./backend:/app
      - ./backend/logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: yelp-network
