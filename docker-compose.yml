services:
  # ===== FRONTEND =====
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: yelp-frontend
    ports:
      - "127.0.0.1:5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    env_file:
      - ./frontend/.env
    depends_on:
      - backend
    restart: unless-stopped

  # ===== BACKEND =====
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: yelp-backend
    command: sh -c "if [ ! -f /app/.migration_done ]; then python manage.py migrate --fake-initial && touch /app/.migration_done; else python manage.py migrate; fi && python manage.py collectstatic --noinput && uvicorn config.asgi:application --host 0.0.0.0 --port 8000 --reload --log-level debug"
    env_file:
      - ./backend/.env
    environment:
      # Перевизначаємо тільки Docker-специфічні змінні
      POSTGRES_HOST: "db"
      REDIS_URL: "redis://redis:6379/1"
    volumes:
      - ./backend:/app
      - ./backend/logs:/app/logs
    ports:
      - "127.0.0.1:8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # ===== DATABASE =====
  db:
    image: postgres:16-alpine
    container_name: yelp-database
    restart: unless-stopped
    ports:
      - "127.0.0.1:5433:5432"
    environment:
      POSTGRES_USER: "yelproot"
      POSTGRES_PASSWORD: "yelproot"
      POSTGRES_DB: "postgres"
      POSTGRES_HOST_AUTH_METHOD: "md5"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/logs:/logs
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U yelproot -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===== REDIS =====
  redis:
    image: redis:7-alpine
    container_name: yelp-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ===== BACKGROUND WORKER =====
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: yelp-worker
    command: python manage.py rqworker default
    env_file:
      - ./backend/.env
    environment:
      POSTGRES_HOST: "db"
      REDIS_URL: "redis://redis:6379/1"
    volumes:
      - ./backend:/app
      - ./backend/logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # ===== SCHEDULER =====
  scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: yelp-scheduler
    command: python manage.py rqscheduler --interval 1
    env_file:
      - ./backend/.env
    environment:
      POSTGRES_HOST: "db"
      REDIS_URL: "redis://redis:6379/1"
    volumes:
      - ./backend:/app
      - ./backend/logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # ===== LOKI (Log Aggregation) =====
  loki:
    image: grafana/loki:2.9.0
    container_name: yelp-loki
    ports:
      - "3100:3100"
    volumes:
      - ./backend/loki-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - default

  # ===== PROMTAIL (Log Collector) =====
  promtail:
    image: grafana/promtail:2.9.0
    container_name: yelp-promtail
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./backend/promtail-config.yaml:/etc/promtail/config.yaml
    command: -config.file=/etc/promtail/config.yaml
    restart: unless-stopped
    depends_on:
      - loki
    networks:
      - default

  # ===== GRAFANA (Visualization) =====
  grafana:
    image: grafana/grafana:10.0.0
    container_name: yelp-grafana
    ports:
      - "3030:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./backend/grafana-datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
      - ./backend/grafana-dashboard.json:/var/lib/grafana/dashboards/
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/grafana-dashboard.json
    restart: unless-stopped
    depends_on:
      - loki
    networks:
      - default

volumes:
  postgres_data:
  redis_data:
  loki_data:
  grafana_data:

networks:
  default:
    name: yelp-network