#!/usr/bin/env python3
"""
üö® Emergency fixes for VectorPDFService crashes
"""

import re

def emergency_fixes():
    """–í–∏–ø—Ä–∞–≤–ª—è—î –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –≤ VectorPDFService"""
    
    with open('backend/webhooks/vector_pdf_service.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # 1. –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ TypeError –≤ _detect_sample_replies_document
    old_indicators = '''        # –ö–ª—é—á–æ–≤—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ Sample Replies
        indicators = [
            'inquiry information:' in text_lower,
            'response:' in text_lower,
            'example #' in text_lower or 'example#' in text_lower,
            re.search(r'name:\\s*[a-z]+ [a-z]\\.?', text_lower),  # Name: John D.
            'talk soon' in text_lower
        ]
        
        detected_count = sum(indicators)'''
    
    new_indicators = '''        # –ö–ª—é—á–æ–≤—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ Sample Replies
        indicators = [
            'inquiry information:' in text_lower,
            'response:' in text_lower,
            'example #' in text_lower or 'example#' in text_lower,
            bool(re.search(r'name:\\s*[a-z]+ [a-z]\\.?', text_lower)),  # Name: John D. - –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ boolean
            'talk soon' in text_lower
        ]
        
        detected_count = sum(indicators)'''
    
    content = content.replace(old_indicators, new_indicators)
    
    # 2. –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ broken _create_sample_replies_chunks method
    old_broken_method = '''    def _create_sample_replies_chunks(self, text: str, max_tokens: int) -> List[DocumentChunk]:
        """–°—Ç–≤–æ—Ä—é—î chunks –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π Sample Replies chunker"""
        
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π chunker
            # sample_replies_chunker removed - using standard method
            
            if not sections:
                logger.warning("[VECTOR-PDF] ‚ö†Ô∏è Specialized chunker failed, falling back to standard")
                return self._create_standard_chunks(text, max_tokens)'''
    
    new_working_method = '''    def _create_sample_replies_chunks(self, text: str, max_tokens: int) -> List[DocumentChunk]:
        """üîÑ Fallback: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π chunking –¥–ª—è Sample Replies"""
        
        logger.warning("[VECTOR-PDF] ‚ö†Ô∏è Specialized chunker not available - using enhanced standard method")
        return self._create_standard_chunks(text, max_tokens)'''
    
    content = content.replace(old_broken_method, new_working_method)
    
    # 3. –í–∏–¥–∞–ª—è—î–º–æ –≤–µ—Å—å broken –∫–æ–¥ –ø—ñ—Å–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è
    # –ó–Ω–∞–π–¥–µ–º–æ –ø–æ—á–∞—Ç–æ–∫ broken –±–ª–æ–∫—É —ñ –≤–∏–¥–∞–ª–∏–º–æ –≤—Å–µ –¥–æ –∫—ñ–Ω—Ü—è –º–µ—Ç–æ–¥—É
    broken_start = content.find('            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ DocumentChunk –æ–±\'—î–∫—Ç–∏')
    if broken_start != -1:
        # –ó–Ω–∞–π–¥–µ–º–æ –∫—ñ–Ω–µ—Ü—å –º–µ—Ç–æ–¥—É _create_sample_replies_chunks
        method_end = content.find('    def _create_standard_chunks(', broken_start)
        if method_end != -1:
            # –í–∏—Ä—ñ–∑–∞—î–º–æ broken –∫–æ–¥
            before = content[:broken_start]
            after = content[method_end:]
            content = before + after
    
    # 4. –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª–æ–≤–∞–Ω–∏–π _identify_chunk_type (—Å—Ç–∞—Ä–∏–π –ø—Ä–æ—Å—Ç–∏–π –º–µ—Ç–æ–¥)
    old_simple_identify = '''    def _identify_chunk_type(self, text: str) -> str:
        """–í–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É —Å–µ–∫—Ü—ñ—ó"""
        text_lower = text.lower()
        
        if 'inquiry information:' in text_lower:
            return 'inquiry'
        elif 'response:' in text_lower:
            return 'response'  
        elif ('inquiry information:' in text_lower and 'response:' in text_lower):
            return 'example'
        else:
            return 'general' '''
    
    # –ü—Ä–æ—Å—Ç–æ –≤–∏–¥–∞–ª—è—î–º–æ —Ü–µ–π –ø—Ä–æ—Å—Ç–∏–π –º–µ—Ç–æ–¥ - —É –Ω–∞—Å –≤–∂–µ —î —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π
    content = content.replace(old_simple_identify, '')
    
    with open('backend/webhooks/vector_pdf_service.py', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ Emergency fixes applied!")

if __name__ == '__main__':
    emergency_fixes()
