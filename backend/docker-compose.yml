services:
  web:
    build:
      context: .
      dockerfile: ./Dockerfile
    command: >
      uvicorn config.asgi:application
      --host 0.0.0.0
      --port 8000
      --reload
      --log-level debug
    env_file:
      - .env
    restart: unless-stopped
    environment:
      DEBUG: "1"
      SECRET_KEY: "super-secret-key"
      ALLOWED_HOSTS: "127.0.0.1,localhost,46.62.139.177"
      DB_ENGINE: "postgres"
      POSTGRES_HOST: "db"
      POSTGRES_PORT: "5432"
      POSTGRES_USER: "yelproot"
      POSTGRES_PASSWORD: "yelproot"
      POSTGRES_DB: "postgres"
    volumes:
      - .:/app
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - db
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "31"  # 31 файлів = ~місяць логів
        compress: "true"

  redis:
    image: redis:7
    restart: unless-stopped
    volumes:
      - redis_data:/data
      - ./logs:/logs
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "31"
        compress: "true"

  db:
    image: postgres:16
    env_file:
      - .env
    restart: unless-stopped
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: "yelproot"
      POSTGRES_PASSWORD: "yelproot"
      POSTGRES_DB: "postgres"
      POSTGRES_HOST_AUTH_METHOD: "md5"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./logs:/logs
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "31"
        compress: "true"

  rqworker:
    build:
      context: .
      dockerfile: ./Dockerfile
    command: python manage.py rqworker default
    env_file:
      - .env
    restart: unless-stopped
    environment:
      DB_ENGINE: "postgres"
      POSTGRES_HOST: "db"
      POSTGRES_PORT: "5432"
      POSTGRES_USER: "yelproot"
      POSTGRES_PASSWORD: "yelproot"
      POSTGRES_DB: "postgres"
    volumes:
      - .:/app
      - ./logs:/app/logs
    depends_on:
      - redis
      - db
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "31"
        compress: "true"

  rqscheduler:
    build:
      context: .
      dockerfile: ./Dockerfile
    command: python manage.py rqscheduler
    env_file:
      - .env
    restart: unless-stopped
    environment:
      DB_ENGINE: "postgres"
      POSTGRES_HOST: "db"
      POSTGRES_PORT: "5432"
      POSTGRES_USER: "yelproot"
      POSTGRES_PASSWORD: "yelproot"
      POSTGRES_DB: "postgres"
    volumes:
      - .:/app
      - ./logs:/app/logs
    depends_on:
      - redis
      - db
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "31"
        compress: "true"

  rqdash:
    build:
      context: .
      dockerfile: ./Dockerfile
    command: rq-dashboard -b 0.0.0.0 -p 9181
    env_file:
      - .env
    restart: unless-stopped
    environment:
      RQ_DASHBOARD_REDIS_URL: redis://redis:6379/1
      RQ_DASHBOARD_QUEUES: default,high,emails,scheduled_jobs
    ports:
      - "9181:9181"
    depends_on:
      - redis
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "31"
        compress: "true"

  scheduler-dashboard:
    build:
      context: .
      dockerfile: ./Dockerfile
    # Patch rq_scheduler_dashboard to avoid deprecated hook
    command: >-
      sh -c "
        sed -i 's/before_app_first_request/before_app_request/' \
          /usr/local/lib/python3.12/site-packages/rq_scheduler_dashboard/web.py &&
        rq-scheduler-dashboard --redis-url redis://redis:6379/1
      "
    env_file:
      - .env
    restart: unless-stopped
    ports:
      - "9182:9182"
    depends_on:
      - redis
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "31"
        compress: "true"

  redis-commander:
    image: rediscommander/redis-commander:latest
    env_file:
      - .env
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379:1
    depends_on:
      - redis
    logging:
      driver: "json-file"
      options:
        max-size: "30m"
        max-file: "31"
        compress: "true"

  # Веб-інтерфейс для перегляду логів
  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "9999:8080"
    environment:
      DOZZLE_LEVEL: info
      DOZZLE_TAILSIZE: 300
      DOZZLE_FILTER: "name=yelp1*"
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
