#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
"""

def add_key_logging():
    """
    –î–æ–¥–∞—î –∫–ª—é—á–æ–≤—ñ –ª–æ–≥–∏ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤
    """
    
    file_path = "webhooks/webhook_views.py"
    
    # –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # 1. –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ phone opt-in –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
    old_line = "                    ld_flags = LeadDetail.objects.filter(lead_id=lid).values(\"phone_opt_in\", \"phone_number\").first()"
    
    new_lines = """                    logger.info(f"[WEBHOOK] üîç CHECKING FOR PHONE OPT-IN CONSUMER RESPONSE")
                    ld_flags = LeadDetail.objects.filter(lead_id=lid).values("phone_opt_in", "phone_number").first()
                    logger.info(f"[WEBHOOK] LeadDetail flags: {ld_flags}")
                    
                    # Show existing tasks before any processing
                    all_existing_tasks = LeadPendingTask.objects.filter(lead_id=lid, active=True)
                    logger.info(f"[WEBHOOK] üìä ALL EXISTING ACTIVE TASKS: {all_existing_tasks.count()}")
                    for task in all_existing_tasks:
                        logger.info(f"[WEBHOOK] - Task {task.task_id}: phone_opt_in={task.phone_opt_in}, phone_available={task.phone_available}")"""
    
    if old_line in content:
        content = content.replace(old_line, new_lines)
        print("‚úÖ –î–æ–¥–∞–Ω–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è phone opt-in detection")
    
    # 2. –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
    old_cancel_line = "                            self._cancel_pre_phone_tasks(lid, reason=reason)"
    
    new_cancel_lines = """                            self._cancel_pre_phone_tasks(lid, reason=reason)
                            
                            # Check what tasks remain after cancellation
                            remaining_tasks = LeadPendingTask.objects.filter(lead_id=lid, active=True)
                            logger.info(f"[WEBHOOK] üìä TASKS AFTER CANCELLATION: {remaining_tasks.count()}")
                            for task in remaining_tasks:
                                logger.info(f"[WEBHOOK] - Remaining: {task.task_id}, phone_opt_in={task.phone_opt_in}")"""
    
    if old_cancel_line in content:
        content = content.replace(old_cancel_line, new_cancel_lines)
        print("‚úÖ –î–æ–¥–∞–Ω–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å")
    
    # 3. –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è regular consumer responses
    old_regular = "                        self._cancel_no_phone_tasks(lid, reason=reason)"
    
    new_regular = """                        logger.info(f"[WEBHOOK] üí¨ REGULAR CONSUMER RESPONSE - cancelling no-phone tasks")
                        self._cancel_no_phone_tasks(lid, reason=reason)
                        
                        # Check what tasks remain after no-phone cancellation
                        remaining_after_regular = LeadPendingTask.objects.filter(lead_id=lid, active=True)
                        logger.info(f"[WEBHOOK] üìä TASKS AFTER NO-PHONE CANCELLATION: {remaining_after_regular.count()}")"""
    
    if old_regular in content:
        content = content.replace(old_regular, new_regular)
        print("‚úÖ –î–æ–¥–∞–Ω–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è regular consumer responses")
    
    # –ó–∞–ø–∏—Å—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("üéâ –ö–õ–Æ–ß–û–í–ï –õ–û–ì–£–í–ê–ù–ù–Ø –î–û–î–ê–ù–û!")
    print("\n–¢–µ–ø–µ—Ä –≤–∏ –ø–æ–±–∞—á–∏—Ç–µ:")
    print("‚Ä¢ –°—Ç–∞–Ω LeadDetail flags (phone_opt_in, phone_number)")
    print("‚Ä¢ –í—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –æ–±—Ä–æ–±–∫–æ—é")
    print("‚Ä¢ –Ø–∫—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞–ª–∏—à–∏–ª–∏—Å—è –ø—ñ—Å–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è")
    print("‚Ä¢ –ß—ñ—Ç–∫–µ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è phone opt-in vs regular responses")

if __name__ == "__main__":
    add_key_logging()
