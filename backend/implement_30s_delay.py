#!/usr/bin/env python3
"""
–†–µ–∞–ª—ñ–∑—É—î 30-—Å–µ–∫—É–Ω–¥–Ω—É –∑–∞—Ç—Ä–∏–º–∫—É –≤ handle_new_lead
"""

def implement_30s_delay():
    """
    –î–æ–¥–∞—î 30-—Å–µ–∫—É–Ω–¥–Ω—É –∑–∞—Ç—Ä–∏–º–∫—É –≤ handle_new_lead –¥–ª—è phone opt-in detection
    """
    
    file_path = "webhooks/webhook_views.py"
    
    # –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –°—Ç–∞—Ä–∏–π –∫–æ–¥ –¥–ª—è –∑–∞–º—ñ–Ω–∏
    old_code = '''        try:
            # Check if this lead has phone opt-in before creating tasks
            ld = LeadDetail.objects.filter(lead_id=lead_id).first()
            logger.info(f"[AUTO-RESPONSE] üîç SCENARIO DETERMINATION:")
            logger.info(f"[AUTO-RESPONSE] - LeadDetail exists: {ld is not None}")
            
            if ld:
                logger.info(f"[AUTO-RESPONSE] - phone_opt_in: {ld.phone_opt_in}")
                logger.info(f"[AUTO-RESPONSE] - phone_number: {ld.phone_number}")
                logger.info(f"[AUTO-RESPONSE] - phone_in_text: {getattr(ld, 'phone_in_text', 'Not set')}")
            
            if ld and ld.phone_opt_in:
                logger.info(f"[AUTO-RESPONSE] üì± SCENARIO SELECTED: PHONE OPT-IN")
                logger.info(f"[AUTO-RESPONSE] ========== NEW LEAD ‚Üí PHONE OPT-IN SCENARIO ==========")
                logger.info(f"[AUTO-RESPONSE] Lead has phone_opt_in=True - creating phone opt-in tasks")
                logger.info(f"[AUTO-RESPONSE] Phone opt-in handler will create additional tasks if needed")
                # Create phone opt-in tasks for new lead
                self._process_auto_response(lead_id, phone_opt_in=True, phone_available=False)
                logger.info(f"[AUTO-RESPONSE] ‚úÖ Phone opt-in scenario tasks created")
            else:
                logger.info(f"[AUTO-RESPONSE] üí¨ SCENARIO SELECTED: NO PHONE")
                logger.info(f"[AUTO-RESPONSE] ========== NEW LEAD ‚Üí NO PHONE SCENARIO ==========")
                logger.info(f"[AUTO-RESPONSE] Lead has phone_opt_in=False - creating no-phone tasks")
                logger.info(f"[AUTO-RESPONSE] This will create standard follow-up sequence")
                # Call _process_auto_response to create LeadDetail but disable SMS for new leads
                self._process_auto_response(lead_id, phone_opt_in=False, phone_available=False)
                logger.info(f"[AUTO-RESPONSE] ‚úÖ No-phone scenario tasks created")
            logger.info(f"[AUTO-RESPONSE] ‚úÖ handle_new_lead completed successfully for {lead_id}")'''
    
    # –ù–æ–≤–∏–π –∫–æ–¥ –∑ 30-—Å–µ–∫—É–Ω–¥–Ω–æ—é –∑–∞—Ç—Ä–∏–º–∫–æ—é
    new_code = '''        try:
            import time
            from django.utils import timezone
            
            # 30-second delay to allow phone opt-in events to be processed
            delay_seconds = 30
            
            logger.info(f"[AUTO-RESPONSE] ‚è∞ IMPLEMENTING 30-SECOND DELAY for phone opt-in detection")
            logger.info(f"[AUTO-RESPONSE] This prevents no-phone tasks from being created for phone opt-in leads")
            logger.info(f"[AUTO-RESPONSE] Delay started at: {timezone.now()}")
            logger.info(f"[AUTO-RESPONSE] Waiting {delay_seconds} seconds for CONSUMER_PHONE_NUMBER_OPT_IN_EVENT...")
            
            time.sleep(delay_seconds)
            
            logger.info(f"[AUTO-RESPONSE] ‚è∞ 30-SECOND DELAY COMPLETED")
            logger.info(f"[AUTO-RESPONSE] Delay ended at: {timezone.now()}")
            logger.info(f"[AUTO-RESPONSE] Now checking final phone_opt_in status after delay")
            
            # Check final status after delay
            ld = LeadDetail.objects.filter(lead_id=lead_id).first()
            logger.info(f"[AUTO-RESPONSE] üîç FINAL SCENARIO DETERMINATION AFTER 30s DELAY:")
            logger.info(f"[AUTO-RESPONSE] - LeadDetail exists: {ld is not None}")
            
            if ld:
                logger.info(f"[AUTO-RESPONSE] - phone_opt_in: {ld.phone_opt_in}")
                logger.info(f"[AUTO-RESPONSE] - phone_number: {ld.phone_number}")
                logger.info(f"[AUTO-RESPONSE] - phone_in_text: {getattr(ld, 'phone_in_text', 'Not set')}")
            
            if ld and ld.phone_opt_in:
                logger.info(f"[AUTO-RESPONSE] üì± FINAL DECISION: PHONE OPT-IN DETECTED AFTER DELAY")
                logger.info(f"[AUTO-RESPONSE] ========== PHONE OPT-IN LEAD ‚Üí SKIP NO-PHONE TASKS ==========")
                logger.info(f"[AUTO-RESPONSE] Phone opt-in was set during the 30-second delay period")
                logger.info(f"[AUTO-RESPONSE] Phone opt-in handler will create appropriate phone opt-in tasks")
                logger.info(f"[AUTO-RESPONSE] ‚úÖ Successfully prevented no-phone task creation for phone opt-in lead")
                logger.info(f"[AUTO-RESPONSE] üö´ NO TASKS CREATED - avoiding duplicate scenarios")
            else:
                logger.info(f"[AUTO-RESPONSE] üí¨ FINAL DECISION: REGULAR LEAD (NO PHONE OPT-IN)")
                logger.info(f"[AUTO-RESPONSE] ========== REGULAR LEAD ‚Üí CREATE NO-PHONE TASKS ==========")
                logger.info(f"[AUTO-RESPONSE] No phone opt-in detected after 30-second delay")
                logger.info(f"[AUTO-RESPONSE] Creating standard no-phone follow-up sequence")
                # Call _process_auto_response to create LeadDetail but disable SMS for new leads
                self._process_auto_response(lead_id, phone_opt_in=False, phone_available=False)
                logger.info(f"[AUTO-RESPONSE] ‚úÖ No-phone scenario tasks created")
            
            logger.info(f"[AUTO-RESPONSE] ‚úÖ handle_new_lead completed successfully for {lead_id}")'''
    
    # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–º—ñ–Ω—É
    if old_code in content:
        content = content.replace(old_code, new_code)
        
        # –ó–∞–ø–∏—Å—É—î–º–æ –Ω–∞–∑–∞–¥
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("üéâ 30-–°–ï–ö–£–ù–î–ù–ê –ó–ê–¢–†–ò–ú–ö–ê –£–°–ü–Ü–®–ù–û –†–ï–ê–õ–Ü–ó–û–í–ê–ù–ê!")
        print("=" * 50)
        print("‚úÖ –î–æ–¥–∞–Ω–æ 30-—Å–µ–∫—É–Ω–¥–Ω—É –∑–∞—Ç—Ä–∏–º–∫—É –≤ handle_new_lead")
        print("‚úÖ –î–æ–¥–∞–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É")
        print("‚úÖ –î–æ–¥–∞–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É phone_opt_in –ø—ñ—Å–ª—è –∑–∞—Ç—Ä–∏–º–∫–∏")
        print("‚úÖ –î–æ–¥–∞–Ω–æ –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—é no-phone –∑–∞–≤–¥–∞–Ω—å –¥–ª—è phone opt-in –ª—ñ–¥—ñ–≤")
        
        print("\nüéØ –Ø–ö –¶–ï –ü–†–ê–¶–Æ–í–ê–¢–ò–ú–ï:")
        print("üì± Phone Opt-In –ª—ñ–¥–∏:")
        print("  1. handle_new_lead —á–µ–∫–∞—î 30 —Å–µ–∫—É–Ω–¥")
        print("  2. phone opt-in –ø–æ–¥—ñ—è –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î phone_opt_in=True")
        print("  3. handle_new_lead –≤–∏—è–≤–ª—è—î phone_opt_in=True ‚Üí –ù–ï —Å—Ç–≤–æ—Ä—é—î no-phone –∑–∞–≤–¥–∞–Ω–Ω—è")
        print("  4. handle_phone_opt_in —Å—Ç–≤–æ—Ä—é—î –¢–Ü–õ–¨–ö–ò phone opt-in –∑–∞–≤–¥–∞–Ω–Ω—è")
        print("  5. –†–µ–∑—É–ª—å—Ç–∞—Ç: –¢—ñ–ª—å–∫–∏ phone opt-in –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚úÖ")
        
        print("\nüí¨ –ó–≤–∏—á–∞–π–Ω—ñ –ª—ñ–¥–∏:")
        print("  1. handle_new_lead —á–µ–∫–∞—î 30 —Å–µ–∫—É–Ω–¥")
        print("  2. phone_opt_in –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è False")
        print("  3. handle_new_lead —Å—Ç–≤–æ—Ä—é—î no-phone –∑–∞–≤–¥–∞–Ω–Ω—è")
        print("  4. –†–µ–∑—É–ª—å—Ç–∞—Ç: –¢—ñ–ª—å–∫–∏ no-phone –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚úÖ")
        
        print("\nüîç –õ–û–ì–£–í–ê–ù–ù–Ø:")
        print("‚Ä¢ –¢–æ—á–Ω–∏–π —á–∞—Å –ø–æ—á–∞—Ç–∫—É —ñ –∫—ñ–Ω—Ü—è –∑–∞—Ç—Ä–∏–º–∫–∏")
        print("‚Ä¢ –°—Ç–∞–Ω LeadDetail –¥–æ —ñ –ø—ñ—Å–ª—è –∑–∞—Ç—Ä–∏–º–∫–∏")
        print("‚Ä¢ –ß—ñ—Ç–∫–µ —Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ —Å—Ü–µ–Ω–∞—Ä—ñ–π")
        print("‚Ä¢ –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –¥—É–±–ª—é–≤–∞–Ω–Ω—é –∑–∞–≤–¥–∞–Ω—å")
        
        return True
    else:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ–¥ –¥–ª—è –∑–∞–º—ñ–Ω–∏")
        print("üîç –ú–æ–∂–ª–∏–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–¥—É –∑–º—ñ–Ω–∏–ª–∞—Å—è")
        
        # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –ø–∞—Ç–µ—Ä–Ω
        if "# Check if this lead has phone opt-in before creating tasks" in content:
            print("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ—á–∞—Ç–æ–∫ –±–ª–æ–∫—É –¥–ª—è –∑–∞–º—ñ–Ω–∏")
            print("üìù –ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–º—ñ–Ω–∏—Ç–∏ –≤—Ä—É—á–Ω—É - –∫–æ–¥ —á–∞—Å—Ç–∫–æ–≤–æ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è")
        
        return False

if __name__ == "__main__":
    implement_30s_delay()
