#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è consumer responses
"""

def add_consumer_response_logging():
    """
    –î–æ–¥–∞—î –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è consumer responses —Ç–∞ phone opt-in detection
    """
    
    file_path = "webhooks/webhook_views.py"
    
    # –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    changes_made = []
    
    # 1. –ü–æ–∫—Ä–∞—â—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è phone opt-in consumer response detection
    old_optin_detection = '''                    # üî• –ö–†–ò–¢–ò–ß–ù–ò–ô –§–Ü–•: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ phone opt-in –ü–ï–†–®–ò–ú, –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é pending tasks
                    ld_flags = LeadDetail.objects.filter(lead_id=lid).values("phone_opt_in", "phone_number").first()
                    if (ld_flags and ld_flags.get("phone_opt_in")):
                        logger.info(f"[WEBHOOK] üì± –í–ò–Ø–í–õ–ï–ù–û –í–Ü–î–ü–û–í–Ü–î–¨ –°–ü–û–ñ–ò–í–ê–ß–ê –ù–ê PHONE OPT-IN")
                        logger.info(f"[WEBHOOK] ========== –í–Ü–î–ü–û–í–Ü–î–¨ –ù–ê PHONE OPT-IN ==========")
                        logger.info(f"[WEBHOOK] Lead ID: {lid}")
                        logger.info(f"[WEBHOOK] Event ID: {eid}")
                        logger.info(f"[WEBHOOK] –¢–µ–∫—Å—Ç –ø–æ–¥—ñ—ó: '{text[:100]}...'" + ("" if len(text) <= 100 else " (–æ–±—Ä—ñ–∑–∞–Ω–æ)"))
                        logger.info(f"[WEBHOOK] Phone opt-in –ø—Ä–∞–ø–æ—Ä: {ld_flags.get('phone_opt_in')}")
                        logger.info(f"[WEBHOOK] –ó–±–µ—Ä–µ–∂–µ–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {ld_flags.get('phone_number')}")
                        logger.info(f"[WEBHOOK] –¢–µ–ª–µ—Ñ–æ–Ω –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {has_phone}")
                        logger.info(f"[WEBHOOK] ‚ùó –°–ø–æ–∂–∏–≤–∞—á –≤—ñ–¥–ø–æ–≤—ñ–≤ –Ω–∞ phone opt-in –ø–æ—Ç—ñ–∫ - —Å–∫–∞—Å–æ–≤—É—î–º–æ phone opt-in –∑–∞–≤–¥–∞–Ω–Ω—è")'''
    
    new_optin_detection = '''                    # üî• –ö–†–ò–¢–ò–ß–ù–ò–ô –§–Ü–•: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ phone opt-in –ü–ï–†–®–ò–ú, –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é pending tasks
                    logger.info(f"[WEBHOOK] üîç CHECKING FOR PHONE OPT-IN CONSUMER RESPONSE")
                    ld_flags = LeadDetail.objects.filter(lead_id=lid).values("phone_opt_in", "phone_number").first()
                    logger.info(f"[WEBHOOK] LeadDetail flags: {ld_flags}")
                    
                    if (ld_flags and ld_flags.get("phone_opt_in")):
                        logger.info(f"[WEBHOOK] üì± ‚úÖ PHONE OPT-IN CONSUMER RESPONSE DETECTED!")
                        logger.info(f"[WEBHOOK] =================== PHONE OPT-IN CONSUMER RESPONSE ===================")
                        logger.info(f"[WEBHOOK] Lead ID: {lid}")
                        logger.info(f"[WEBHOOK] Event ID: {eid}")
                        logger.info(f"[WEBHOOK] Event text: '{text[:100]}...'" + ("" if len(text) <= 100 else " (–æ–±—Ä—ñ–∑–∞–Ω–æ)"))
                        logger.info(f"[WEBHOOK] Phone opt-in flag: {ld_flags.get('phone_opt_in')}")
                        logger.info(f"[WEBHOOK] Stored phone number: {ld_flags.get('phone_number')}")
                        logger.info(f"[WEBHOOK] Phone found in current response: {has_phone}")
                        logger.info(f"[WEBHOOK] ‚ùó Consumer replied to phone opt-in flow - processing cancellation")
                        
                        # Show existing phone opt-in tasks before cancellation
                        existing_optin_tasks = LeadPendingTask.objects.filter(
                            lead_id=lid, phone_opt_in=True, active=True
                        )
                        logger.info(f"[WEBHOOK] üìã EXISTING PHONE OPT-IN TASKS BEFORE CANCELLATION:")
                        logger.info(f"[WEBHOOK] - Total phone opt-in tasks: {existing_optin_tasks.count()}")
                        
                        for task in existing_optin_tasks:
                            logger.info(f"[WEBHOOK] - Task {task.task_id}: '{task.text[:50]}...', created: {task.created_at}")'''
    
    if old_optin_detection in content:
        content = content.replace(old_optin_detection, new_optin_detection)
        changes_made.append("‚úÖ Enhanced phone opt-in consumer response detection")
    
    # 2. –ü–æ–∫—Ä–∞—â—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
    old_after_cancel = '''                            logger.info(f"[WEBHOOK] üöÄ –í–ò–ö–õ–ò–ö–ê–Ñ–ú–û _cancel_pre_phone_tasks –¥–ª—è phone opt-in –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
                            self._cancel_pre_phone_tasks(lid, reason=reason)
                            
                            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ SMS —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–ø–æ–∂–∏–≤–∞—á–∞ –Ω–∞ phone opt-in
                            logger.info(f"[WEBHOOK] üì± –ù–ê–î–°–ò–õ–ê–Ñ–ú–û SMS –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ Phone Opt-in")
                            self._send_customer_reply_sms_only(lid)'''
    
    new_after_cancel = '''                            logger.info(f"[WEBHOOK] üöÄ CALLING _cancel_pre_phone_tasks for phone opt-in response")
                            self._cancel_pre_phone_tasks(lid, reason=reason)
                            
                            # Check what tasks remain after cancellation
                            remaining_tasks = LeadPendingTask.objects.filter(lead_id=lid, active=True)
                            logger.info(f"[WEBHOOK] üìä TASKS REMAINING AFTER CANCELLATION:")
                            logger.info(f"[WEBHOOK] - Total remaining active tasks: {remaining_tasks.count()}")
                            
                            for task in remaining_tasks:
                                logger.info(f"[WEBHOOK] - Remaining task {task.task_id}: phone_opt_in={task.phone_opt_in}, phone_available={task.phone_available}")
                            
                            # Send SMS notification for phone opt-in consumer reply
                            logger.info(f"[WEBHOOK] üì± SENDING Phone Opt-in Consumer Reply SMS")
                            self._send_customer_reply_sms_only(lid)'''
    
    if old_after_cancel in content:
        content = content.replace(old_after_cancel, new_after_cancel)
        changes_made.append("‚úÖ Enhanced post-cancellation logging")
    
    # 3. –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö consumer responses
    old_regular_response = '''                    elif pending:
                        logger.info(f"[WEBHOOK] üö´ CLIENT RESPONDED WITHOUT PHONE NUMBER")
                        logger.info(f"[WEBHOOK] ========== CUSTOMER REPLY SCENARIO (NO PHONE) ==========")
                        logger.info(f"[WEBHOOK] Lead ID: {lid}")
                        logger.info(f"[WEBHOOK] Event ID: {eid}")
                        logger.info(f"[WEBHOOK] Event text: '{text[:100]}...'" + ("" if len(text) <= 100 else " (truncated)"))
                        logger.info(f"[WEBHOOK] Has pending no-phone tasks: {pending}")
                        logger.info(f"[WEBHOOK] Phone number found in text: {has_phone}")
                        logger.info(f"[WEBHOOK] ‚ùó Customer Reply scenario - cancelling tasks + sending Customer Reply SMS")
                        logger.info(f"[WEBHOOK] üéØ SMS DECISION ANALYSIS:")
                        logger.info(f"[WEBHOOK] - Scenario: Customer Reply (phone_opt_in=False, phone_available=False)")
                        logger.info(f"[WEBHOOK] - Current behavior: Cancel pending tasks + Customer Reply SMS")
                        
                        reason = "Client responded, but no number was found"
                        self._cancel_no_phone_tasks(lid, reason=reason)'''
    
    new_regular_response = '''                    elif pending:
                        logger.info(f"[WEBHOOK] üí¨ REGULAR CONSUMER RESPONSE (NO PHONE OPT-IN)")
                        logger.info(f"[WEBHOOK] =================== REGULAR CUSTOMER REPLY ===================")
                        logger.info(f"[WEBHOOK] Lead ID: {lid}")
                        logger.info(f"[WEBHOOK] Event ID: {eid}")
                        logger.info(f"[WEBHOOK] Event text: '{text[:100]}...'" + ("" if len(text) <= 100 else " (truncated)"))
                        logger.info(f"[WEBHOOK] Has pending no-phone tasks: {pending}")
                        logger.info(f"[WEBHOOK] Phone number found in text: {has_phone}")
                        logger.info(f"[WEBHOOK] ‚ùó Regular customer reply - processing standard cancellation")
                        
                        # Show existing no-phone tasks before cancellation
                        existing_no_phone_tasks = LeadPendingTask.objects.filter(
                            lead_id=lid, phone_opt_in=False, phone_available=False, active=True
                        )
                        logger.info(f"[WEBHOOK] üìã EXISTING NO-PHONE TASKS BEFORE CANCELLATION:")
                        logger.info(f"[WEBHOOK] - Total no-phone tasks: {existing_no_phone_tasks.count()}")
                        
                        for task in existing_no_phone_tasks:
                            logger.info(f"[WEBHOOK] - Task {task.task_id}: '{task.text[:50]}...', created: {task.created_at}")
                        
                        logger.info(f"[WEBHOOK] üéØ SCENARIO: Regular Customer Reply (phone_opt_in=False, phone_available=False)")
                        logger.info(f"[WEBHOOK] üéØ ACTION: Cancel no-phone tasks + Send Customer Reply SMS")
                        
                        reason = "Client responded, but no number was found"
                        self._cancel_no_phone_tasks(lid, reason=reason)
                        
                        # Check what tasks remain after cancellation
                        remaining_tasks = LeadPendingTask.objects.filter(lead_id=lid, active=True)
                        logger.info(f"[WEBHOOK] üìä TASKS REMAINING AFTER NO-PHONE CANCELLATION:")
                        logger.info(f"[WEBHOOK] - Total remaining active tasks: {remaining_tasks.count()}")
                        
                        for task in remaining_tasks:
                            logger.info(f"[WEBHOOK] - Remaining task {task.task_id}: phone_opt_in={task.phone_opt_in}, phone_available={task.phone_available}")'''
    
    if old_regular_response in content:
        content = content.replace(old_regular_response, new_regular_response)
        changes_made.append("‚úÖ Enhanced regular consumer response logging")
    
    # 4. –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –Ω–∞ –ø–æ—á–∞—Ç–∫—É consumer event processing
    old_consumer_start = '''                if is_new and e.get("user_type") == "CONSUMER":
                    logger.info(f"[WEBHOOK] üë§ PROCESSING CONSUMER EVENT as TRULY NEW")
                    logger.info(f"[WEBHOOK] Event ID: {eid}")
                    logger.info(f"[WEBHOOK] Event text: '{text[:100]}...'" + ("" if len(text) <= 100 else " (truncated)"))
                    logger.info(f"[WEBHOOK] Has phone in text: {has_phone}")
                    if has_phone:
                        logger.info(f"[WEBHOOK] Extracted phone: {phone}")'''
    
    new_consumer_start = '''                if is_new and e.get("user_type") == "CONSUMER":
                    logger.info(f"[WEBHOOK] üë§ PROCESSING CONSUMER EVENT as TRULY NEW")
                    logger.info(f"[WEBHOOK] =================== CONSUMER EVENT ANALYSIS ===================")
                    logger.info(f"[WEBHOOK] Event ID: {eid}")
                    logger.info(f"[WEBHOOK] Event text: '{text[:100]}...'" + ("" if len(text) <= 100 else " (truncated)"))
                    logger.info(f"[WEBHOOK] Has phone in text: {has_phone}")
                    if has_phone:
                        logger.info(f"[WEBHOOK] Extracted phone: {phone}")
                    
                    # Show current lead state
                    current_lead = LeadDetail.objects.filter(lead_id=lid).first()
                    if current_lead:
                        logger.info(f"[WEBHOOK] üìä CURRENT LEAD STATE:")
                        logger.info(f"[WEBHOOK] - phone_opt_in: {current_lead.phone_opt_in}")
                        logger.info(f"[WEBHOOK] - phone_number: {current_lead.phone_number}")
                        logger.info(f"[WEBHOOK] - phone_in_text: {getattr(current_lead, 'phone_in_text', 'Not set')}")
                    else:
                        logger.info(f"[WEBHOOK] ‚ö†Ô∏è No LeadDetail found for {lid}")'''
    
    if old_consumer_start in content:
        content = content.replace(old_consumer_start, new_consumer_start)
        changes_made.append("‚úÖ Enhanced consumer event start logging")
    
    # –ó–∞–ø–∏—Å—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    return changes_made

if __name__ == "__main__":
    changes = add_consumer_response_logging()
    
    if changes:
        print("üéâ –î–ï–¢–ê–õ–¨–ù–ï –õ–û–ì–£–í–ê–ù–ù–Ø CONSUMER RESPONSES –î–û–î–ê–ù–û!")
        print("=" * 50)
        for change in changes:
            print(change)
        
        print("\nüîç –î–û–î–ê–¢–ö–û–í–ï –õ–û–ì–£–í–ê–ù–ù–Ø –í–ö–õ–Æ–ß–ê–Ñ:")
        print("‚úÖ –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω LeadDetail –ø—Ä–∏ consumer response")
        print("‚úÖ –î–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —ñ—Å–Ω—É—é—á—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è–º")
        print("‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å, —â–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—è –ø—ñ—Å–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è")
        print("‚úÖ –ß—ñ—Ç–∫—ñ –º—ñ—Ç–∫–∏ –¥–ª—è phone opt-in vs regular consumer responses")
        print("‚úÖ –ü–æ–∫—Ä–æ–∫–æ–≤–µ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å")
        
        print("\nüìã –¢–ï–ü–ï–† –í–ò –ü–û–ë–ê–ß–ò–¢–ï:")
        print("‚Ä¢ –ß–∏ —î phone_opt_in=True –≤ LeadDetail")
        print("‚Ä¢ –Ø–∫—ñ phone opt-in –∑–∞–≤–¥–∞–Ω–Ω—è —ñ—Å–Ω—É—é—Ç—å")
        print("‚Ä¢ –Ø–∫—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤—É—é—Ç—å—Å—è")
        print("‚Ä¢ –Ø–∫—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω–∏–º–∏")
        print("‚Ä¢ –¢–æ—á–Ω—É –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –æ–±—Ä–æ–±–∫–∏ events")
    else:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ consumer response –ª–æ–≥—É–≤–∞–Ω–Ω—è")
