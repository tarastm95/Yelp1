"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
import sys
import logging
from decouple import config
from logging.handlers import RotatingFileHandler
from pythonjsonlogger import jsonlogger
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

def get_required_env(key: str) -> str:
    """Get required environment variable or exit with error"""
    value = os.getenv(key)
    if not value:
        print(f"❌ ERROR: Required environment variable '{key}' is not set in .env file!")
        print(f"Please add {key}=your_value to backend/.env")
        sys.exit(1)
    return value

def get_env_bool(key: str) -> bool:
    """Get boolean environment variable or exit with error"""
    value = get_required_env(key)
    return value.lower() in ('true', '1', 'yes', 'on')

def get_env_list(key: str, separator: str = ',') -> list:
    """Get list environment variable or exit with error"""
    value = get_required_env(key)
    return [item.strip() for item in value.split(separator) if item.strip()]

# Default to plain-text storage of tokens unless explicitly overridden
os.environ.setdefault("DISABLE_TOKEN_ENCRYPTION", "true")

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_required_env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_env_bool('DEBUG')

SENTRY_DSN = os.getenv("SENTRY_DSN")
if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[DjangoIntegration()],
        traces_sample_rate=float(os.getenv("SENTRY_TRACES_SAMPLE_RATE", "0.1")),
        send_default_pii=True,
    )

ALLOWED_HOSTS = get_env_list('ALLOWED_HOSTS')

REDIS_URL = get_required_env("REDIS_URL")
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": REDIS_URL,
    }
}

# settings.py
LOG_DIR = BASE_DIR / "logs"
LOG_DIR.mkdir(exist_ok=True)
LOG_FILE = os.getenv("DJANGO_LOG_FILE", LOG_DIR / "django.log")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "json": {
            "()": "pythonjsonlogger.jsonlogger.JsonFormatter",
            "fmt": "%(asctime)s %(levelname)s %(name)s %(lineno)d %(message)s",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "json",
            "stream": "ext://sys.stdout",
        },
        "file": {
            "class": "logging.handlers.RotatingFileHandler",
            "formatter": "json",
            "filename": str(LOG_FILE),
            "maxBytes": 1024 * 1024 * 5,  # 5 MB
            "backupCount": 5,
        },
    },
    "root": {
        "handlers": ["console", "file"],
        "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
    },
    "loggers": {
        "webhooks": {
            "handlers": ["console", "file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "django.request": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

RQ_QUEUES = {
    "default": {
        "URL": REDIS_URL,
        "DEFAULT_TIMEOUT": 360,
    }
}


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'webhooks',
    'django_rq',
    'corsheaders',
    'django_filters',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DB_ENGINE = os.getenv("DB_ENGINE", "sqlite")

if DB_ENGINE == "postgres":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("POSTGRES_DB", "postgres"),
            "USER": os.getenv("POSTGRES_USER", "yelproot"),
            "PASSWORD": os.getenv("POSTGRES_PASSWORD", "yelproot"),
            "HOST": os.getenv("POSTGRES_HOST", "localhost"),
            "PORT": os.getenv("POSTGRES_PORT", "5432"),
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "dbdata" / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Yelp OAuth Settings
YELP_CLIENT_ID = get_required_env('YELP_CLIENT_ID')
YELP_CLIENT_SECRET = get_required_env('YELP_CLIENT_SECRET')
YELP_OAUTH_REDIRECT_URI = get_required_env('YELP_OAUTH_REDIRECT_URI')
YELP_AUTHORIZATION_URL = 'https://biz.yelp.com/oauth2/authorize'
YELP_TOKEN_URL = 'https://api.yelp.com/oauth2/token'
YELP_PARTNER_API_URL = 'https://partner-api.yelp.com/v3/businesses'
YELP_OAUTH_SCOPES = [
    'leads',              # для роботи з лідами
    'r2r',               # для відповідей на відгуки
    'r2r_get_businesses', # для отримання списку бізнесів
    'r2r_business_owner'  # для отримання інформації про власника
]
YELP_API_KEY = get_required_env("YELP_API_KEY")
YELP_TOKEN_SECRET = get_required_env("YELP_TOKEN_SECRET")
# When true, tokens are stored and logged in plain text without encryption
DISABLE_TOKEN_ENCRYPTION = get_env_bool("DISABLE_TOKEN_ENCRYPTION")
GOOGLE_TIMEZONE_API_KEY = get_required_env("GOOGLE_TIMEZONE_API_KEY")

# Frontend URL
FRONTEND_URL = get_required_env('FRONTEND_URL')

# Google sheets
GS_SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]

GS_SPREADSHEET_ID = get_required_env('GS_SPREADSHEET_ID')
GOOGLE_SERVICE_ACCOUNT_FILE = BASE_DIR / "service_account.json"

CORS_ALLOWED_ORIGINS = get_env_list('CORS_ALLOWED_ORIGINS')

# Twilio SMS configuration
TWILIO_ACCOUNT_SID = config('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN = config('TWILIO_AUTH_TOKEN')
TWILIO_PHONE_NUMBER = config('TWILIO_PHONE_NUMBER')

