#!/usr/bin/env python3
"""
üîç Frontend Logging Patch –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ AI Preview –ø—Ä–æ–±–ª–µ–º
"""

import re

def add_frontend_logging():
    """–î–æ–¥–∞—î –¥–µ—Ç–∞–ª—å–Ω–µ console.log –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤ AutoResponseSettings.tsx"""
    
    print("üîß Patching frontend AutoResponseSettings.tsx...")
    
    with open('frontend/src/AutoResponseSettings.tsx', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ó–Ω–∞–π—Ç–∏ handleGeneratePreview —Ñ—É–Ω–∫—Ü—ñ—é —Ç–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    # –®—É–∫–∞—î–º–æ –º—ñ—Å—Ü–µ –¥–µ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è AI Preview API
    
    # 1. –î–æ–¥–∞—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ handleGeneratePreview
    pattern_preview_start = r'(const handleGeneratePreview = async \(\) => {)'
    
    replacement = r'''\1
    console.log('üöÄ [FRONTEND] AI PREVIEW GENERATION STARTED');
    console.log('üìä [FRONTEND] Settings:', {
      business: selectedBusiness,
      phoneAvailable,
      useAiGreeting,
      useSampleReplies,
      vectorSimilarityThreshold,
      vectorSearchLimit,
      vectorChunkTypes,
      customPreviewText: aiCustomPreviewText?.substring(0, 100) + '...'
    });'''
    
    content = re.sub(pattern_preview_start, replacement, content, flags=re.MULTILINE)
    
    # 2. –î–æ–¥–∞—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ API –≤–∏–∫–ª–∏–∫–æ–º
    # –®—É–∫–∞—î–º–æ axios.post –¥–ª—è preview
    preview_api_pattern = r'(.*axios\.post.*ai-preview.*)'
    
    # –°–∫–ª–∞–¥–Ω–æ –∑–Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–µ –º—ñ—Å—Ü–µ, —Ç–æ–º—É –¥–æ–¥–∞–º–æ –∑–∞–≥–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ setAiPreviewLoading(true)
    loading_pattern = r'(setAiPreviewLoading\(true\);)'
    
    loading_replacement = r'''console.log('üì° [FRONTEND] Sending AI Preview request...', {
      apiEndpoint: '/ai-preview/',
      requestData: {
        business_id: selectedBusiness,
        phone_available: phoneAvailable,
        custom_preview_text: aiCustomPreviewText,
        vector_settings: {
          similarity_threshold: vectorSimilarityThreshold,
          search_limit: vectorSearchLimit,
          chunk_types: vectorChunkTypes
        }
      }
    });
    
    \1'''
    
    content = re.sub(loading_pattern, loading_replacement, content, flags=re.MULTILINE)
    
    # 3. –î–æ–¥–∞—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    # –®—É–∫–∞—î–º–æ .then(res => {
    then_pattern = r'(\.then\(res => {)'
    
    then_replacement = r'''\1
        console.log('‚úÖ [FRONTEND] AI Preview response received:', res.data);
        console.log('üìä [FRONTEND] Response details:', {
          preview: res.data.preview?.substring(0, 100) + '...',
          vectorSearchEnabled: res.data.vector_search_enabled,
          vectorResultsCount: res.data.vector_results_count,
          status: res.status
        });'''
    
    content = re.sub(then_pattern, then_replacement, content, flags=re.MULTILINE)
    
    # 4. –î–æ–¥–∞—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
    catch_pattern = r'(\.catch\(error => {)'
    
    catch_replacement = r'''\1
        console.error('‚ùå [FRONTEND] AI Preview error:', error);
        console.error('üîç [FRONTEND] Error details:', {
          message: error.message,
          response: error.response?.data,
          status: error.response?.status,
          settings: {
            vectorSimilarityThreshold,
            vectorSearchLimit,
            useSampleReplies
          }
        });'''
    
    content = re.sub(catch_pattern, catch_replacement, content, flags=re.MULTILINE)
    
    with open('frontend/src/AutoResponseSettings.tsx', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ Frontend logging patches applied!")

if __name__ == '__main__':
    add_frontend_logging()
