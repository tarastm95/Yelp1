#!/usr/bin/env python3
"""
üîß Final indentation fix for _create_standard_chunks method
"""

def fix_final_indentation():
    """–í–∏–ø—Ä–∞–≤–ª—è—î —ñ–Ω–¥–µ–Ω—Ç–∞—Ü—ñ—é –º–µ—Ç–æ–¥—É _create_standard_chunks"""
    
    with open('backend/webhooks/vector_pdf_service.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ —ñ–Ω–¥–µ–Ω—Ç–∞—Ü—ñ—é –º–µ—Ç–æ–¥—É - –∑ 8 –ø—Ä–æ–±—ñ–ª—ñ–≤ –Ω–∞ 4
    content = content.replace(
        "        def _create_standard_chunks(self, text: str, max_tokens: int) -> List[DocumentChunk]:",
        "    def _create_standard_chunks(self, text: str, max_tokens: int) -> List[DocumentChunk]:"
    )
    
    # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ —ñ–Ω–¥–µ–Ω—Ç–∞—Ü—ñ—é –≤—Å—å–æ–≥–æ —Ç—ñ–ª–∞ –º–µ—Ç–æ–¥—É
    lines = content.split('\\n')
    fixed_lines = []
    fix_indentation = False
    
    for line in lines:
        if 'def _create_standard_chunks(self, text: str, max_tokens: int)' in line:
            fix_indentation = True
            fixed_lines.append(line)
        elif fix_indentation and line.startswith('    def ') and '_create_standard_chunks' not in line:
            # –ù–∞—Å—Ç—É–ø–Ω–∏–π –º–µ—Ç–æ–¥ –ø–æ—á–∞–≤—Å—è - –ø—Ä–∏–ø–∏–Ω—è—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
            fix_indentation = False
            fixed_lines.append(line)
        elif fix_indentation and line.startswith('        '):
            # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥—Å—Ç—É–ø: 8 –ø—Ä–æ–±—ñ–ª—ñ–≤ ‚Üí 4 –ø—Ä–æ–±—ñ–ª–∏
            fixed_lines.append(line[4:])
        else:
            fixed_lines.append(line)
    
    content = '\\n'.join(fixed_lines)
    
    with open('backend/webhooks/vector_pdf_service.py', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ Fixed _create_standard_chunks method indentation!")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with open('backend/webhooks/vector_pdf_service.py', 'r', encoding='utf-8') as f:
        check_content = f.read()
    
    if '        def _create_standard_chunks' in check_content:
        print("‚ùå Still has wrong indentation!")
    elif '    def _create_standard_chunks' in check_content:
        print("‚úÖ Indentation corrected successfully!")
    else:
        print("‚ö†Ô∏è Method not found - check manually")

if __name__ == '__main__':
    fix_final_indentation()
